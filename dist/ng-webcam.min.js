!function(){"use strict";function n(n){function e(){return['<div class="ng-webcam">','<div id="ng-webcam-container"></div>'].join("")}function o(n,e,o,i){i.init(),n.$on("$destroy",function(){i.destroy()})}function i(n,e,o,i){function t(){m.config=m.config||{},angular.isUndefined(m.config.viewerWidth)&&(m.config.viewerWidth="auto"),angular.isUndefined(m.config.viewerHeight)&&(m.config.viewerHeight="auto"),angular.isUndefined(m.config.outputWidth)&&(m.config.outputWidth=320),angular.isUndefined(m.config.outputHeight)&&(m.config.outputHeight=240),angular.isUndefined(m.config.delay)&&(m.config.delay=0),angular.isUndefined(m.config.shots)&&(m.config.shots=1),r(),c()}function a(){Webcam.reset(),m.webcamLive=!1,m.webcamLoaded=!1}function c(){angular.isDefined(m.config.shutterUrl)&&(l=new Audio,l.autoplay=!1,navigator.userAgent.match(/Firefox/)?l.src=m.config.shutterUrl.split(".")[0]+".ogg":l.src=m.config.shutterUrl),Webcam.set({width:m.config.viewerWidth,height:m.config.viewerHeight,dest_width:m.config.outputWidth,dest_height:m.config.outputHeight,force_flash:!1,image_format:"jpeg",jpeg_quality:100}),angular.isDefined(m.config.flashFallbackUrl)&&Webcam.setSWFLocation(m.config.flashFallbackUrl),angular.isDefined(m.config.flashNotDetectedText)&&Webcam.set("flashNotDetectedText",m.config.flashNotDetectedText),Webcam.attach("#ng-webcam-container")}function r(){Webcam.on("load",function(){n.$apply(function(){m.webcamLoaded=!0,angular.isDefined(m.onLoad)&&m.onLoad()})}),Webcam.on("live",function(){n.$apply(function(){m.webcamLive=!0,angular.isDefined(m.onLive)&&m.onLive()})}),Webcam.on("error",function(n){if(angular.isDefined(m.onError))return m.onError({err:n})})}function g(n){l&&l.play(),n===m.config.shots-1&&e.cancel(d),Webcam.snap(function(e){if(h[n]=e,n<m.config.shots-1&&angular.isDefined(m.onCaptureProgress)){var o=Math.round(100*(n+1)/m.config.shots);m.onCaptureProgress({src:e,progress:o})}if(n===m.config.shots-1&&angular.isDefined(m.onCaptureComplete))return m.onCaptureComplete({src:h})})}function f(n){o.debug("ngWebcamController.onWebcamCapture(event) : ",n);var i=0;d=e(function(){g(i),i++},1e3*m.config.delay,m.config.shots)}function u(n){o.debug("ngWebcamController.onWebcamOn(event) : ",n),Webcam.attach("#ng-webcam-container")}function s(n){o.debug("ngWebcamController.onWebcamOff(event) : ",n),a()}var l,d,m=this,h=[];m.webcamLoaded=!1,m.webcamLive=!1,m.progress="0%",m.init=t,m.destroy=a,n.$on("ngWebcam_capture",f),n.$on("ngWebcam_on",u),n.$on("ngWebcam_off",s)}var t={restrict:"E",template:e,link:o,bindToController:!0,controller:i,controllerAs:"cam",scope:{config:"=",onCaptureComplete:"&",onError:"&",onLoad:"&",onCaptureProgress:"&",onLive:"&"}};return i.$inject=["$scope","$interval","$log","$window"],t}angular.module("ng-webcam",[]).directive("ngWebcam",n),n.$inject=["$log"]}();
//# sourceMappingURL=data:application/json;base64,
