!function(){"use strict";function n(){function n(){return['<div class="ng-webcam" ng-show="vm.webcamLive">','<div id="ng-webcam-container"></div>'].join("")}function i(n,i,e,o){o.init(),n.$on("$destroy",function(){o.destroy()})}function e(n,i){function e(){d.config=d.config||{},angular.isUndefined(d.config.viewerWidth)&&(d.config.viewerWidth="auto"),angular.isUndefined(d.config.viewerHeight)&&(d.config.viewerHeight="auto"),angular.isUndefined(d.config.outputWidth)&&(d.config.outputWidth=320),angular.isUndefined(d.config.outputHeight)&&(d.config.outputHeight=240),angular.isUndefined(d.config.delay)&&(d.config.delay=0),angular.isUndefined(d.config.shots)&&(d.config.shots=1),t(),c()}function o(){Webcam.reset(),d.webcamLive=!1,d.webcamLoaded=!1}function t(){angular.isDefined(d.config.shutterUrl)&&(u=new Audio,u.autoplay=!1,navigator.userAgent.match(/Firefox/)?u.src=d.config.shutterUrl.split(".")[0]+".ogg":u.src=d.config.shutterUrl),Webcam.set({width:d.config.viewerWidth,height:d.config.viewerHeight,dest_width:d.config.outputWidth,dest_height:d.config.outputHeight}),angular.isDefined(d.config.flashFallbackUrl)&&Webcam.setSWFLocation(d.config.flashFallbackUrl),Webcam.attach("#ng-webcam-container")}function c(){Webcam.on("load",function(){n.$apply(function(){d.webcamLoaded=!0,angular.isDefined(d.onLoad)&&d.onLoad()})}),Webcam.on("live",function(){n.$apply(function(){d.webcamLive=!0})}),Webcam.on("error",function(n){if(angular.isDefined(d.onError))return d.onError({err:n})})}function a(n){u&&u.play(),n===d.config.shots-1&&i.cancel(s),Webcam.snap(function(i){if(l[n]=i,n<d.config.shots-1&&angular.isDefined(d.onCapturing)){var e=Math.round(100*(n+1)/d.config.shots);d.onCapturing({src:i,progress:e})}if(n===d.config.shots-1&&angular.isDefined(d.onComplete))return d.onComplete({src:l,progress:100})})}function r(){var n=0;s=i(function(){a(n),n++},d.config.delay,d.config.shots)}function f(){Webcam.attach("#ng-webcam-container")}function g(){o()}var u,s,d=this,l=[];d.webcamLoaded=!1,d.webcamLive=!1,d.progress="0%",d.init=e,d.destroy=o,n.$on("ngWebcam_capture",r),n.$on("ngWebcam_on",f),n.$on("ngWebcam_off",g)}var o={restrict:"E",template:n,link:i,bindToController:!0,controller:e,controllerAs:"vm",scope:{config:"=",onComplete:"&",onError:"&",onLoad:"&",onCapturing:"&"}};return e.$inject=["$scope","$interval"],o}angular.module("ng-webcam",[]).directive("ngWebcam",n),n.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,
