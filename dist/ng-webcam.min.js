!function(){"use strict";function n(){function n(){return['<div class="ng-webcam">','<div id="ng-webcam-container"></div>'].join("")}function e(n,e,i,o){o.init(),n.$on("$destroy",function(){o.destroy()})}function i(n,e,i){function o(){l.config=l.config||{},angular.isUndefined(l.config.viewerWidth)&&(l.config.viewerWidth="auto"),angular.isUndefined(l.config.viewerHeight)&&(l.config.viewerHeight="auto"),angular.isUndefined(l.config.outputWidth)&&(l.config.outputWidth=320),angular.isUndefined(l.config.outputHeight)&&(l.config.outputHeight=240),angular.isUndefined(l.config.delay)&&(l.config.delay=0),angular.isUndefined(l.config.shots)&&(l.config.shots=1),c(),a()}function t(){Webcam.reset(),l.webcamLive=!1,l.webcamLoaded=!1}function a(){angular.isDefined(l.config.shutterUrl)&&(u=new Audio,u.autoplay=!1,navigator.userAgent.match(/Firefox/)?u.src=l.config.shutterUrl.split(".")[0]+".ogg":u.src=l.config.shutterUrl),Webcam.set({width:l.config.viewerWidth,height:l.config.viewerHeight,dest_width:l.config.outputWidth,dest_height:l.config.outputHeight,force_flash:!1,image_format:"jpeg",jpeg_quality:100}),angular.isDefined(l.config.flashFallbackUrl)&&Webcam.setSWFLocation(l.config.flashFallbackUrl),angular.isDefined(l.config.flashNotDetectedText)&&Webcam.set("flashNotDetectedText",l.config.flashNotDetectedText),Webcam.attach("#ng-webcam-container")}function c(){Webcam.on("load",function(){n.$apply(function(){l.webcamLoaded=!0,angular.isDefined(l.onLoad)&&l.onLoad()})}),Webcam.on("live",function(){n.$apply(function(){l.webcamLive=!0,angular.isDefined(l.onLive)&&l.onLive()})}),Webcam.on("error",function(n){if(angular.isDefined(l.onError))return l.onError({err:n})})}function r(n){u&&u.play(),n===l.config.shots-1&&e.cancel(d),Webcam.snap(function(e){if(h[n]=e,n<l.config.shots-1&&angular.isDefined(l.onCaptureProgress)){var i=Math.round(100*(n+1)/l.config.shots);l.onCaptureProgress({src:e,progress:i})}if(n===l.config.shots-1&&angular.isDefined(l.onCaptureComplete))return l.onCaptureComplete({src:h})})}function f(){var n=0;d=e(function(){r(n),n++},1e3*l.config.delay,l.config.shots)}function g(){Webcam.attach("#ng-webcam-container")}function s(){t()}var u,d,l=this,h=[];l.webcamLoaded=!1,l.webcamLive=!1,l.progress="0%",l.init=o,l.destroy=t,n.$on("ngWebcam_capture",f),n.$on("ngWebcam_on",g),n.$on("ngWebcam_off",s)}var o={restrict:"E",template:n,link:e,bindToController:!0,controller:i,controllerAs:"cam",scope:{config:"=",onCaptureComplete:"&",onError:"&",onLoad:"&",onCaptureProgress:"&",onLive:"&"}};return i.$inject=["$scope","$interval","$window"],o}angular.module("ng-webcam",[]).directive("ngWebcam",n),n.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXdlYmNhbS5qcyJdLCJuYW1lcyI6WyJuZ1dlYmNhbSIsInRlbXBsYXRlIiwiam9pbiIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsImN0cmwiLCJpbml0IiwiJG9uIiwiZGVzdHJveSIsIm5nV2ViY2FtQ29udHJvbGxlciIsIiRzY29wZSIsIiRpbnRlcnZhbCIsIiR3aW5kb3ciLCJ2bSIsImNvbmZpZyIsImFuZ3VsYXIiLCJpc1VuZGVmaW5lZCIsInZpZXdlcldpZHRoIiwidmlld2VySGVpZ2h0Iiwib3V0cHV0V2lkdGgiLCJvdXRwdXRIZWlnaHQiLCJkZWxheSIsInNob3RzIiwiY29uZmlndXJlTGlzdGVuZXJzIiwiY29uZmlndXJlIiwiV2ViY2FtIiwicmVzZXQiLCJ3ZWJjYW1MaXZlIiwid2ViY2FtTG9hZGVkIiwiaXNEZWZpbmVkIiwic2h1dHRlclVybCIsInNvdW5kIiwiQXVkaW8iLCJhdXRvcGxheSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1hdGNoIiwic3JjIiwic3BsaXQiLCJzZXQiLCJ3aWR0aCIsImhlaWdodCIsImRlc3Rfd2lkdGgiLCJkZXN0X2hlaWdodCIsImZvcmNlX2ZsYXNoIiwiaW1hZ2VfZm9ybWF0IiwianBlZ19xdWFsaXR5IiwiZmxhc2hGYWxsYmFja1VybCIsInNldFNXRkxvY2F0aW9uIiwiZmxhc2hOb3REZXRlY3RlZFRleHQiLCJhdHRhY2giLCJvbiIsIiRhcHBseSIsIm9uTG9hZCIsIm9uTGl2ZSIsImVyciIsIm9uRXJyb3IiLCJjYXB0dXJlIiwiaW5kZXgiLCJwbGF5IiwiY2FuY2VsIiwidGltZXIiLCJzbmFwIiwiZGF0YV91cmkiLCJpbWFnZXMiLCJvbkNhcHR1cmVQcm9ncmVzcyIsInByb2dyZXNzIiwiTWF0aCIsInJvdW5kIiwib25DYXB0dXJlQ29tcGxldGUiLCJvbldlYmNhbUNhcHR1cmUiLCJjb3VudCIsIm9uV2ViY2FtT24iLCJvbldlYmNhbU9mZiIsInRoaXMiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsImJpbmRUb0NvbnRyb2xsZXIiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiJGluamVjdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQXNCQSxTQUFBQSxLQWtCQSxRQUFBQyxLQUNBLE9BQUEsMEJBQ0Esd0NBQUFDLEtBQUEsSUFHQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxPQUNBSixFQUFBSyxJQUFBLFdBQUEsV0FDQUYsRUFBQUcsWUFNQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxHQTRDQSxRQUFBTixLQUNBTyxFQUFBQyxPQUFBRCxFQUFBQyxXQUNBQyxRQUFBQyxZQUFBSCxFQUFBQyxPQUFBRyxlQUFBSixFQUFBQyxPQUFBRyxZQUFBLFFBQ0FGLFFBQUFDLFlBQUFILEVBQUFDLE9BQUFJLGdCQUFBTCxFQUFBQyxPQUFBSSxhQUFBLFFBQ0FILFFBQUFDLFlBQUFILEVBQUFDLE9BQUFLLGVBQUFOLEVBQUFDLE9BQUFLLFlBQUEsS0FDQUosUUFBQUMsWUFBQUgsRUFBQUMsT0FBQU0sZ0JBQUFQLEVBQUFDLE9BQUFNLGFBQUEsS0FDQUwsUUFBQUMsWUFBQUgsRUFBQUMsT0FBQU8sU0FBQVIsRUFBQUMsT0FBQU8sTUFBQSxHQUNBTixRQUFBQyxZQUFBSCxFQUFBQyxPQUFBUSxTQUFBVCxFQUFBQyxPQUFBUSxNQUFBLEdBQ0FDLElBQ0FDLElBR0EsUUFBQWhCLEtBQ0FpQixPQUFBQyxRQUNBYixFQUFBYyxZQUFBLEVBQ0FkLEVBQUFlLGNBQUEsRUFHQSxRQUFBSixLQUNBVCxRQUFBYyxVQUFBaEIsRUFBQUMsT0FBQWdCLGNBQ0FDLEVBQUEsR0FBQUMsT0FDQUQsRUFBQUUsVUFBQSxFQUNBQyxVQUFBQyxVQUFBQyxNQUFBLFdBQ0FMLEVBQUFNLElBQUF4QixFQUFBQyxPQUFBZ0IsV0FBQVEsTUFBQSxLQUFBLEdBQUEsT0FFQVAsRUFBQU0sSUFBQXhCLEVBQUFDLE9BQUFnQixZQUdBTCxPQUFBYyxLQUNBQyxNQUFBM0IsRUFBQUMsT0FBQUcsWUFDQXdCLE9BQUE1QixFQUFBQyxPQUFBSSxhQUNBd0IsV0FBQTdCLEVBQUFDLE9BQUFLLFlBQ0F3QixZQUFBOUIsRUFBQUMsT0FBQU0sYUFDQXdCLGFBQUEsRUFDQUMsYUFBQSxPQUNBQyxhQUFBLE1BRUEvQixRQUFBYyxVQUFBaEIsRUFBQUMsT0FBQWlDLG1CQUNBdEIsT0FBQXVCLGVBQUFuQyxFQUFBQyxPQUFBaUMsa0JBRUFoQyxRQUFBYyxVQUFBaEIsRUFBQUMsT0FBQW1DLHVCQUNBeEIsT0FBQWMsSUFBQSx1QkFBQTFCLEVBQUFDLE9BQUFtQyxzQkFFQXhCLE9BQUF5QixPQUFBLHdCQUdBLFFBQUEzQixLQUNBRSxPQUFBMEIsR0FBQSxPQUFBLFdBQ0F6QyxFQUFBMEMsT0FBQSxXQUNBdkMsRUFBQWUsY0FBQSxFQUNBYixRQUFBYyxVQUFBaEIsRUFBQXdDLFNBQ0F4QyxFQUFBd0MsYUFJQTVCLE9BQUEwQixHQUFBLE9BQUEsV0FDQXpDLEVBQUEwQyxPQUFBLFdBQ0F2QyxFQUFBYyxZQUFBLEVBQ0FaLFFBQUFjLFVBQUFoQixFQUFBeUMsU0FDQXpDLEVBQUF5QyxhQUlBN0IsT0FBQTBCLEdBQUEsUUFBQSxTQUFBSSxHQUNBLEdBQUF4QyxRQUFBYyxVQUFBaEIsRUFBQTJDLFNBQ0EsTUFBQTNDLEdBQUEyQyxTQUFBRCxJQUFBQSxNQUtBLFFBQUFFLEdBQUFDLEdBQ0EzQixHQUNBQSxFQUFBNEIsT0FFQUQsSUFBQTdDLEVBQUFDLE9BQUFRLE1BQUEsR0FDQVgsRUFBQWlELE9BQUFDLEdBRUFwQyxPQUFBcUMsS0FBQSxTQUFBQyxHQUVBLEdBREFDLEVBQUFOLEdBQUFLLEVBQ0FMLEVBQUE3QyxFQUFBQyxPQUFBUSxNQUFBLEdBQUFQLFFBQUFjLFVBQUFoQixFQUFBb0QsbUJBQUEsQ0FDQSxHQUFBQyxHQUFBQyxLQUFBQyxNQUFBLEtBQUFWLEVBQUEsR0FBQTdDLEVBQUFDLE9BQUFRLE1BQ0FULEdBQUFvRCxtQkFBQTVCLElBQUEwQixFQUFBRyxTQUFBQSxJQUVBLEdBQUFSLElBQUE3QyxFQUFBQyxPQUFBUSxNQUFBLEdBQUFQLFFBQUFjLFVBQUFoQixFQUFBd0QsbUJBQ0EsTUFBQXhELEdBQUF3RCxtQkFBQWhDLElBQUEyQixNQUtBLFFBQUFNLEtBQ0EsR0FBQUMsR0FBQSxDQUNBVixHQUFBbEQsRUFBQSxXQUNBOEMsRUFBQWMsR0FDQUEsS0FDQSxJQUFBMUQsRUFBQUMsT0FBQU8sTUFBQVIsRUFBQUMsT0FBQVEsT0FHQSxRQUFBa0QsS0FDQS9DLE9BQUF5QixPQUFBLHdCQUdBLFFBQUF1QixLQUNBakUsSUFoSkEsR0FDQXVCLEdBQUE4QixFQURBaEQsRUFBQTZELEtBRUFWLElBQ0FuRCxHQUFBZSxjQUFBLEVBQ0FmLEVBQUFjLFlBQUEsRUFDQWQsRUFBQXFELFNBQUEsS0FDQXJELEVBQUFQLEtBQUFBLEVBQ0FPLEVBQUFMLFFBQUFBLEVBV0FFLEVBQUFILElBQUEsbUJBQUErRCxHQVdBNUQsRUFBQUgsSUFBQSxjQUFBaUUsR0FXQTlELEVBQUFILElBQUEsZUFBQWtFLEdBekVBLEdBQUFFLElBQ0FDLFNBQUEsSUFDQTdFLFNBQUFBLEVBQ0FFLEtBQUFBLEVBQ0E0RSxrQkFBQSxFQUNBQyxXQUFBckUsRUFDQXNFLGFBQUEsTUFDQTdFLE9BQ0FZLE9BQUEsSUFDQXVELGtCQUFBLElBQ0FiLFFBQUEsSUFDQUgsT0FBQSxJQUNBWSxrQkFBQSxJQUNBWCxPQUFBLEtBNkxBLE9BN0tBN0MsR0FBQXVFLFNBQUEsU0FBQSxZQUFBLFdBNktBTCxFQWhPQTVELFFBQUFrRSxPQUFBLGdCQUFBTixVQUFBLFdBQUE3RSxHQUNBQSxFQUFBa0YiLCJmaWxlIjoibmctd2ViY2FtLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ25nLXdlYmNhbScsIFtdKS5kaXJlY3RpdmUoJ25nV2ViY2FtJywgbmdXZWJjYW0pO1xyXG4gIG5nV2ViY2FtLiRpbmplY3QgPSBbXTtcclxuICAvKipcclxuICAgKiAgQG5nZG9jIERpcmVjdGl2ZVxyXG4gICAqICBAbmFtZSBuZy13ZWJjYW1cclxuICAgKiAgQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiAgRGlyZWN0aXZlIGZvciBjYXB0dXJpbmcgaW1hZ2VzIGZyb20geW91ciBjb21wdXRlcidzIGNhbWVyYSwgYW5kIGRlbGl2ZXJ5IHRoZW4gdG8geW91IGFzIGRhdGEgdXJpXHJcbiAgICpcclxuICAgKiAgQHVzYWdlXHJcbiAgICogIGBgYGh0bWxcclxuICAgKiAgPG5nLXdlYmNhbVxyXG4gICAqICAgIGNvbmZpZz1cInZtLmNvbmZpZ1wiXHJcbiAgICogICAgb24tZXJyb3I9XCJ2bS5vbkVycm9yKGVycilcIlxyXG4gICAqICAgIG9uLWxvYWQ9XCJ2bS5vbkxvYWQoKVwiXHJcbiAgICogICAgb24tbGl2ZT1cInZtLm9uTGl2ZSgpXCJcclxuICAgKiAgICBvbi1jYXB0dXJlLXByb2dyZXNzPVwidm0ub25DYXB0dXJlUHJvZ3Jlc3Moc3JjLCBwcm9ncmVzcylcIlxyXG4gICAqICAgIG9uLWNhcHR1cmUtY29tcGxldGU9XCJ2bS5vbkNhcHR1cmVDb21wbGV0ZShzcmMpXCI+XHJcbiAgICogIDwvbmctd2ViY2FtPlxyXG4gICAqICBgYGBcclxuICAgKi9cclxuICBmdW5jdGlvbiBuZ1dlYmNhbSgpIHtcclxuICAgIHZhciBkaXJlY3RpdmUgPSB7XHJcbiAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcclxuICAgICAgbGluazogbGluayxcclxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcclxuICAgICAgY29udHJvbGxlcjogbmdXZWJjYW1Db250cm9sbGVyLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICdjYW0nLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIGNvbmZpZzogJz0nLFxyXG4gICAgICAgIG9uQ2FwdHVyZUNvbXBsZXRlOiAnJicsXHJcbiAgICAgICAgb25FcnJvcjogJyYnLFxyXG4gICAgICAgIG9uTG9hZDogJyYnLFxyXG4gICAgICAgIG9uQ2FwdHVyZVByb2dyZXNzOiAnJicsXHJcbiAgICAgICAgb25MaXZlOiAnJidcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZSgpIHtcclxuICAgICAgcmV0dXJuIFsnPGRpdiBjbGFzcz1cIm5nLXdlYmNhbVwiPicsXHJcbiAgICAgICAgJzxkaXYgaWQ9XCJuZy13ZWJjYW0tY29udGFpbmVyXCI+PC9kaXY+J10uam9pbignJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcclxuICAgICAgY3RybC5pbml0KCk7XHJcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjdHJsLmRlc3Ryb3koKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdXZWJjYW1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJHdpbmRvdyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIG5nV2ViY2FtQ29udHJvbGxlcigkc2NvcGUsICRpbnRlcnZhbCwgJHdpbmRvdykge1xyXG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgdmFyIHNvdW5kLCB0aW1lcjtcclxuICAgICAgdmFyIGltYWdlcyA9IFtdO1xyXG4gICAgICB2bS53ZWJjYW1Mb2FkZWQgPSBmYWxzZTtcclxuICAgICAgdm0ud2ViY2FtTGl2ZSA9IGZhbHNlO1xyXG4gICAgICB2bS5wcm9ncmVzcyA9ICcwJSc7XHJcbiAgICAgIHZtLmluaXQgPSBpbml0O1xyXG4gICAgICB2bS5kZXN0cm95ID0gZGVzdHJveTtcclxuICAgICAgLyoqXHJcbiAgICAgICAqICBAbmdkb2MgbGlzdGVuZXJcclxuICAgICAgICogIEBuYW1lIG5nV2ViY2FtX2NhcHR1cmVcclxuICAgICAgICogIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgTGlzdGVuZXIgZm9yIGNhcHR1cmUgdXNlciBhY3Rpb25cclxuICAgICAgICpcclxuICAgICAgICogIEB1c2FnZVxyXG4gICAgICAgKiAgYCRzY29wZS4kYnJvYWRjYXN0KCduZ1dlYmNhbV9jYXB0dXJlJyk7YFxyXG4gICAgICAgKi9cclxuICAgICAgJHNjb3BlLiRvbignbmdXZWJjYW1fY2FwdHVyZScsIG9uV2ViY2FtQ2FwdHVyZSk7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiAgQG5nZG9jIGxpc3RlbmVyXHJcbiAgICAgICAqICBAbmFtZSBuZ1dlYmNhbV9vblxyXG4gICAgICAgKiAgQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqICBMaXN0ZW5lciBmb3IgY2FtZXJhIG9uIHVzZXIgYWN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqICBAdXNhZ2VcclxuICAgICAgICogIGAkc2NvcGUuJGJyb2FkY2FzdCgnbmdXZWJjYW1fb24nKTtgXHJcbiAgICAgICAqL1xyXG4gICAgICAkc2NvcGUuJG9uKCduZ1dlYmNhbV9vbicsIG9uV2ViY2FtT24pO1xyXG4gICAgICAvKipcclxuICAgICAgICogIEBuZ2RvYyBsaXN0ZW5lclxyXG4gICAgICAgKiAgQG5hbWUgbmdXZWJjYW1fb2ZmXHJcbiAgICAgICAqICBAZGVzY3JpcHRpb25cclxuICAgICAgICpcclxuICAgICAgICogIExpc3RlbmVyIGZvciBjYW1lcmEgb2ZmIHVzZXIgYWN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqICBAdXNhZ2VcclxuICAgICAgICogIGAkc2NvcGUuJGJyb2FkY2FzdCgnbmdXZWJjYW1fb2ZmJyk7YFxyXG4gICAgICAgKi9cclxuICAgICAgJHNjb3BlLiRvbignbmdXZWJjYW1fb2ZmJywgb25XZWJjYW1PZmYpO1xyXG5cclxuICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICB2bS5jb25maWcgPSB2bS5jb25maWcgfHwge307XHJcbiAgICAgICAgaWYoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS5jb25maWcudmlld2VyV2lkdGgpKSB2bS5jb25maWcudmlld2VyV2lkdGggPSAnYXV0byc7XHJcbiAgICAgICAgaWYoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS5jb25maWcudmlld2VySGVpZ2h0KSkgdm0uY29uZmlnLnZpZXdlckhlaWdodCA9ICdhdXRvJztcclxuICAgICAgICBpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLmNvbmZpZy5vdXRwdXRXaWR0aCkpIHZtLmNvbmZpZy5vdXRwdXRXaWR0aCA9IDMyMDtcclxuICAgICAgICBpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLmNvbmZpZy5vdXRwdXRIZWlnaHQpKSB2bS5jb25maWcub3V0cHV0SGVpZ2h0ID0gMjQwO1xyXG4gICAgICAgIGlmKGFuZ3VsYXIuaXNVbmRlZmluZWQodm0uY29uZmlnLmRlbGF5KSkgdm0uY29uZmlnLmRlbGF5ID0gMDtcclxuICAgICAgICBpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLmNvbmZpZy5zaG90cykpIHZtLmNvbmZpZy5zaG90cyA9IDE7XHJcbiAgICAgICAgY29uZmlndXJlTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgY29uZmlndXJlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgV2ViY2FtLnJlc2V0KCk7XHJcbiAgICAgICAgdm0ud2ViY2FtTGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLndlYmNhbUxvYWRlZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBjb25maWd1cmUoKSB7XHJcbiAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQodm0uY29uZmlnLnNodXR0ZXJVcmwpKSB7XHJcbiAgICAgICAgICBzb3VuZCA9IG5ldyBBdWRpbygpO1xyXG4gICAgICAgICAgc291bmQuYXV0b3BsYXkgPSBmYWxzZTtcclxuICAgICAgICAgIGlmKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3gvKSkge1xyXG4gICAgICAgICAgICBzb3VuZC5zcmMgPSB2bS5jb25maWcuc2h1dHRlclVybC5zcGxpdCgnLicpWzBdICsgJy5vZ2cnO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc291bmQuc3JjID0gdm0uY29uZmlnLnNodXR0ZXJVcmw7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYmNhbS5zZXQoe1xyXG4gICAgICAgICAgd2lkdGg6IHZtLmNvbmZpZy52aWV3ZXJXaWR0aCxcclxuICAgICAgICAgIGhlaWdodDogdm0uY29uZmlnLnZpZXdlckhlaWdodCxcclxuICAgICAgICAgIGRlc3Rfd2lkdGg6IHZtLmNvbmZpZy5vdXRwdXRXaWR0aCxcclxuICAgICAgICAgIGRlc3RfaGVpZ2h0OiB2bS5jb25maWcub3V0cHV0SGVpZ2h0LFxyXG4gICAgICAgICAgZm9yY2VfZmxhc2g6IGZhbHNlLFxyXG4gICAgICAgICAgaW1hZ2VfZm9ybWF0OiAnanBlZycsXHJcbiAgICAgICAgICBqcGVnX3F1YWxpdHk6IDEwMFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmNvbmZpZy5mbGFzaEZhbGxiYWNrVXJsKSkge1xyXG4gICAgICAgICAgV2ViY2FtLnNldFNXRkxvY2F0aW9uKHZtLmNvbmZpZy5mbGFzaEZhbGxiYWNrVXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQodm0uY29uZmlnLmZsYXNoTm90RGV0ZWN0ZWRUZXh0KSkge1xyXG4gICAgICAgICAgV2ViY2FtLnNldCgnZmxhc2hOb3REZXRlY3RlZFRleHQnLCB2bS5jb25maWcuZmxhc2hOb3REZXRlY3RlZFRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBXZWJjYW0uYXR0YWNoKCcjbmctd2ViY2FtLWNvbnRhaW5lcicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBjb25maWd1cmVMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgV2ViY2FtLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2bS53ZWJjYW1Mb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihhbmd1bGFyLmlzRGVmaW5lZCh2bS5vbkxvYWQpKSB7XHJcbiAgICAgICAgICAgICAgdm0ub25Mb2FkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFdlYmNhbS5vbignbGl2ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdm0ud2ViY2FtTGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZtLm9uTGl2ZSkpIHtcclxuICAgICAgICAgICAgICB2bS5vbkxpdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgV2ViY2FtLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQodm0ub25FcnJvcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLm9uRXJyb3Ioe2VycjplcnJ9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2FwdHVyZShpbmRleCkge1xyXG4gICAgICAgIGlmKHNvdW5kKSB7XHJcbiAgICAgICAgICBzb3VuZC5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGluZGV4ID09PSAodm0uY29uZmlnLnNob3RzLTEpKSB7XHJcbiAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHRpbWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViY2FtLnNuYXAoZnVuY3Rpb24oZGF0YV91cmkpIHtcclxuICAgICAgICAgIGltYWdlc1tpbmRleF0gPSBkYXRhX3VyaTtcclxuICAgICAgICAgIGlmKGluZGV4IDwgKHZtLmNvbmZpZy5zaG90cy0xKSAmJiBhbmd1bGFyLmlzRGVmaW5lZCh2bS5vbkNhcHR1cmVQcm9ncmVzcykpIHtcclxuICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5yb3VuZCgoKGluZGV4KzEpICogMTAwKSAvIHZtLmNvbmZpZy5zaG90cyk7XHJcbiAgICAgICAgICAgIHZtLm9uQ2FwdHVyZVByb2dyZXNzKHtzcmM6IGRhdGFfdXJpLHByb2dyZXNzOiBwcm9ncmVzc30pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoaW5kZXggPT09ICh2bS5jb25maWcuc2hvdHMtMSkgJiYgYW5ndWxhci5pc0RlZmluZWQodm0ub25DYXB0dXJlQ29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5vbkNhcHR1cmVDb21wbGV0ZSh7c3JjOiBpbWFnZXN9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gb25XZWJjYW1DYXB0dXJlKCkge1xyXG4gICAgICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICAgICAgdGltZXIgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBjYXB0dXJlKGNvdW50KTtcclxuICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgfSwgKHZtLmNvbmZpZy5kZWxheSAqIDEwMDApLCB2bS5jb25maWcuc2hvdHMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBvbldlYmNhbU9uKCkge1xyXG4gICAgICAgIFdlYmNhbS5hdHRhY2goJyNuZy13ZWJjYW0tY29udGFpbmVyJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIG9uV2ViY2FtT2ZmKCkge1xyXG4gICAgICAgIGRlc3Ryb3koKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gaGFzVXNlck1lZGlhKCkge1xyXG4gICAgICAgIHJldHVybiAoJHdpbmRvdy5uYXZpZ2F0b3IuZ2V0VXNlck1lZGlhIHx8ICR3aW5kb3cubmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fFxyXG4gICAgICAgICR3aW5kb3cubmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYSB8fCAkd2luZG93Lm5hdmlnYXRvci5tc0dldFVzZXJNZWRpYSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGJyb3dzZXJzKCkge1xyXG4gICAgICAgIC8qanNoaW50IG1heGNvbXBsZXhpdHk6IDQwICovXHJcbiAgICAgICAgdmFyIHVhPSAkd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQsIHRlbSxcclxuICAgICAgICAgICAgTT0gdWEubWF0Y2goLyhvcGVyYXxjaHJvbWV8c2FmYXJpfGZpcmVmb3h8bXNpZXx0cmlkZW50KD89XFwvKSlcXC8/XFxzKihcXGQrKS9pKSB8fCBbXTtcclxuICAgICAgICBpZigvdHJpZGVudC9pLnRlc3QoTVsxXSkpe1xyXG4gICAgICAgICAgdGVtPSAgL1xcYnJ2WyA6XSsoXFxkKykvZy5leGVjKHVhKSB8fCBbXTtcclxuICAgICAgICAgIHJldHVybiAnSUUgJysodGVtWzFdIHx8ICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoTVsxXT09PSAnQ2hyb21lJyl7XHJcbiAgICAgICAgICB0ZW09IHVhLm1hdGNoKC9cXGIoT1BSfEVkZ2UpXFwvKFxcZCspLyk7XHJcbiAgICAgICAgICBpZih0ZW0hPSBudWxsKSByZXR1cm4gdGVtLnNsaWNlKDEpLmpvaW4oJyAnKS5yZXBsYWNlKCdPUFInLCAnT3BlcmEnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgTT0gTVsyXT8gW01bMV0sIE1bMl1dOiBbbmF2aWdhdG9yLmFwcE5hbWUsIG5hdmlnYXRvci5hcHBWZXJzaW9uLCAnLT8nXTtcclxuICAgICAgICBpZigodGVtPSB1YS5tYXRjaCgvdmVyc2lvblxcLyhcXGQrKS9pKSkhPSBudWxsKSBNLnNwbGljZSgxLCAxLCB0ZW1bMV0pO1xyXG4gICAgICAgIHJldHVybiBNLmpvaW4oJyAnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcclxuICB9XHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
