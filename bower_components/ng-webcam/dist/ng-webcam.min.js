!function(){"use strict";function n(){function n(n,e){return['<div ng-show="cam.webcamLive === true" class="ng-webcam" ng-class="{\'no-overlay\' : cam.counter === 0 || cam.config.countdown === 0}">','<span ng-show="cam.config.countdown >= 0" id="counter">{{cam.counter}}</span>','<div id="ng-webcam-container" class="ng-webcam-continer"></div>',"</div>"].join("")}function e(n,e,o,i){i.init(),n.$on("$destroy",function(){i.destroy()})}function o(n,e,o){function i(){h.config=h.config||{},angular.isUndefined(h.config.viewerWidth)&&(h.config.viewerWidth="auto"),angular.isUndefined(h.config.viewerHeight)&&(h.config.viewerHeight="auto"),angular.isUndefined(h.config.outputWidth)&&(h.config.outputWidth=320),angular.isUndefined(h.config.outputHeight)&&(h.config.outputHeight=240),angular.isUndefined(h.config.delay)&&(h.config.delay=0),angular.isUndefined(h.config.shots)&&(h.config.shots=1),angular.isUndefined(h.config.countdown)&&(h.config.countdown=0),a(),c()}function t(){Webcam.reset(),h.webcamLive=!1,h.webcamLoaded=!1}function c(){angular.isDefined(h.config.shutterUrl)&&(s=new Audio,s.autoplay=!1,navigator.userAgent.match(/Firefox/)?s.src=h.config.shutterUrl.split(".")[0]+".ogg":s.src=h.config.shutterUrl),Webcam.set({width:h.config.viewerWidth,height:h.config.viewerHeight,dest_width:h.config.outputWidth,dest_height:h.config.outputHeight,force_flash:!1,image_format:"jpeg",jpeg_quality:100}),angular.isDefined(h.config.flashFallbackUrl)&&Webcam.setSWFLocation(h.config.flashFallbackUrl),angular.isDefined(h.config.flashNotDetectedText)&&Webcam.set("flashNotDetectedText",h.config.flashNotDetectedText),Webcam.attach("#ng-webcam-container")}function a(){Webcam.on("load",function(){n.$apply(function(){h.webcamLoaded=!0,angular.isDefined(h.onLoad)&&h.onLoad()})}),Webcam.on("live",function(){n.$apply(function(){h.webcamLive=!0,angular.isDefined(h.onLive)&&h.onLive()})}),Webcam.on("error",function(n){if(angular.isDefined(h.onError))return h.onError({err:n})})}function r(n){s&&s.play(),n===h.config.shots-1&&e.cancel(d),Webcam.snap(function(e){if(m[n]=e,n<h.config.shots-1&&angular.isDefined(h.onCaptureProgress)){var o=Math.round(100*(n+1)/h.config.shots);h.onCaptureProgress({src:e,progress:o})}if(n===h.config.shots-1&&angular.isDefined(h.onCaptureComplete))return h.onCaptureComplete({src:m})})}function f(){if(h.counter=3,angular.isUndefined(h.config.countdown)){var n=0;d=e(function(){r(n),n++},1e3*h.config.delay,h.config.shots)}else l=e(function(){if(--h.counter,0===h.counter){l&&e.cancel(l);var n=0;d=e(function(){r(n),n++},1e3*h.config.delay,h.config.shots)}},1e3,h.config.countdown)}function g(){Webcam.attach("#ng-webcam-container")}function u(){t()}var s,d,l,h=this,m=[];h.webcamLoaded=!1,h.webcamLive=!1,h.progress="0%",h.counter=3,h.init=i,h.destroy=t,n.$on("ngWebcam_capture",f),n.$on("ngWebcam_on",g),n.$on("ngWebcam_off",u)}var i={restrict:"E",template:n,link:e,bindToController:!0,controller:o,controllerAs:"cam",scope:{config:"=",onCaptureComplete:"&",onError:"&",onLoad:"&",onCaptureProgress:"&",onLive:"&"}};return o.$inject=["$scope","$interval","$window"],i}angular.module("ng-webcam",[]).directive("ngWebcam",n),n.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,
